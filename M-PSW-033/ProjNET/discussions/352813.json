[
  {
    "Id": "825882",
    "ThreadId": "352813",
    "Html": "<p>This is my demo code: (References ProjNet Nuget package, DotSpatial.Projections Nuget package)</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">class</span> Program\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: blue;\">double</span>[] originalCoords = { 23.57892F, 37.94712F };\r\n\r\n            <span style=\"color: green;\">// ProjNet To EPSG:3785</span>\r\n            <span style=\"color: green;\">// Found in: <a href=\"http://projnet.codeplex.com/wikipage?title=CommonWellKnownText&amp;referringTitle=Home\">http://projnet.codeplex.com/wikipage?title=CommonWellKnownText&amp;referringTitle=Home</a> </span>\r\n            ICoordinateTransformation ct = TransformToEPSG3785();\r\n            <span style=\"color: blue;\">double</span>[] resultProjNet3785 = ct.MathTransform.Transform(originalCoords);\r\n\r\n            <span style=\"color: green;\">// ProjNet To EPSG:3857</span>\r\n            <span style=\"color: green;\">// Found in: <a href=\"http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/\">http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/</a></span>\r\n            ct = TransformToEPSG3857();\r\n            <span style=\"color: blue;\">double</span>[] resultProjNet3857 = ct.MathTransform.Transform(originalCoords);\r\n\r\n            <span style=\"color: green;\">// DotSpatial.Projections to Web Mercator</span>\r\n            <span style=\"color: blue;\">double</span>[] resultDotSpatial = { originalCoords[0], originalCoords[1] };\r\n            <span style=\"color: blue;\">double</span>[] z = { 0 };\r\n            Reproject.ReprojectPoints(resultDotSpatial, z, KnownCoordinateSystems.Geographic.World.WGS1984, KnownCoordinateSystems.Projected.World.WebMercator, 0, 1);\r\n\r\n            <span style=\"color: green;\">// Manual Convertion</span>\r\n            <span style=\"color: green;\">// Found in: <a href=\"http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/\">http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/</a></span>\r\n            <span style=\"color: blue;\">double</span>[] resultManual = { 0F, 0F };\r\n            resultManual[0] = originalCoords[0] * 20037508.34 / 180;\r\n            resultManual[1] = Math.Log(Math.Tan((90 + originalCoords[1]) * Math.PI / 360)) / (Math.PI / 180);\r\n            resultManual[1] = resultManual[1] * 20037508.34 / 180;\r\n\r\n            <span style=\"color: green;\">// ProjNet To Google Mercator</span>\r\n            <span style=\"color: green;\">// Getting from KnownCoordinateSystems.Projected.World.WebMercator.ToEsriString()</span>\r\n            <span style=\"color: green;\">// Getting error: {\"Projection Mercator_Auxiliary_Sphere is not supported.\"}</span>\r\n            <span style=\"color: green;\">//ct = TransformToWebMercator();</span>\r\n            <span style=\"color: green;\">//double[] resultProjNetWebMercator = ct.MathTransform.Transform(originalCoords);</span>\r\n\r\n\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"Original Coordinates in 'EPSG:4326' convert to 'EPSG:3857':\"</span>);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"X: {0:.000000}, Y: {1:.000000}\"</span>, originalCoords[0], originalCoords[1]);\r\n            Console.WriteLine();\r\n            \r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"      with ProjNet To EPSG:3785 &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNet3785[0], resultProjNet3785[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"      with ProjNet To EPSG:3857 &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNet3857[0], resultProjNet3857[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"    with DotSpatial.Projections &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultDotSpatial[0], resultDotSpatial[1]);\r\n\r\n            <span style=\"color: green;\">//Console.WriteLine(\"   with ProjNet To Web Mercator &gt;&gt; X: {0:.000000}, Y: {1:.000000}\", resultProjNetWebMercator[0], resultProjNetWebMercator[1]);</span>\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"          manual Convertion     &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultManual[0], resultManual[1]);\r\n\r\n            Console.Read();\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToEPSG3785()\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> epsg3785 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"Popular Visualisation CRS / Mercator\\\", GEOGCS[\\\"Popular Visualisation CRS\\\", DATUM[\\\"Popular Visualisation Datum\\\", SPHEROID[\\\"Popular Visualisation Sphere\\\", 6378137, 0, AUTHORITY[\\\"EPSG\\\", \\\"7059\\\"]], TOWGS84[0, 0, 0, 0, 0, 0, 0], AUTHORITY[\\\"EPSG\\\", \\\"6055\\\"]], PRIMEM[\\\"Greenwich\\\", 0, AUTHORITY[\\\"EPSG\\\", \\\"8901\\\"]], UNIT[\\\"degree\\\", 0.0174532925199433, AUTHORITY[\\\"EPSG\\\", \\\"9102\\\"]], AXIS[\\\"E\\\", EAST], AXIS[\\\"N\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"4055\\\"]], PROJECTION[\\\"Mercator\\\"], PARAMETER[\\\"False_Easting\\\", 0], PARAMETER[\\\"False_Northing\\\", 0], PARAMETER[\\\"Central_Meridian\\\", 0], PARAMETER[\\\"Latitude_of_origin\\\", 0], UNIT[\\\"metre\\\", 1, AUTHORITY[\\\"EPSG\\\", \\\"9001\\\"]], AXIS[\\\"East\\\", EAST], AXIS[\\\"North\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"3785\\\"]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, epsg3785);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToEPSG3857()\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> epsg3857 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS 84 / Pseudo-Mercator\\\", GEOGCS[\\\"WGS 84\\\", DATUM[\\\"WGS_1984\\\", SPHEROID[\\\"WGS 84\\\", 6378137, 298.257223563, AUTHORITY[\\\"EPSG\\\", \\\"7030\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"6326\\\"]], PRIMEM[\\\"Greenwich\\\", 0, AUTHORITY[\\\"EPSG\\\", \\\"8901\\\"]], UNIT[\\\"degree\\\", 0.01745329251994328, AUTHORITY[\\\"EPSG\\\", \\\"9122\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"4326\\\"]], PROJECTION[\\\"Mercator_1SP\\\"], PARAMETER[\\\"central_meridian\\\", 0], PARAMETER[\\\"scale_factor\\\", 1], PARAMETER[\\\"false_easting\\\", 0], PARAMETER[\\\"false_northing\\\", 0], UNIT[\\\"metre\\\", 1, AUTHORITY[\\\"EPSG\\\", \\\"9001\\\"]], AXIS[\\\"X\\\", EAST], AXIS[\\\"Y\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"3857\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> epsg3857mod = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS 84 / Pseudo-Mercator\\\", GEOGCS[\\\"WGS 84\\\", DATUM[\\\"WGS_1984\\\", SPHEROID[\\\"WGS 84\\\", 6378137, 298.257223563, AUTHORITY[\\\"EPSG\\\", \\\"7030\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"6326\\\"]], PRIMEM[\\\"Greenwich\\\", 0, AUTHORITY[\\\"EPSG\\\", \\\"8901\\\"]], UNIT[\\\"degree\\\", 0.01745329251994328, AUTHORITY[\\\"EPSG\\\", \\\"9122\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"4326\\\"]], PROJECTION[\\\"Mercator_1SP\\\"], PARAMETER[\\\"latitude_of_origin\\\", 0], PARAMETER[\\\"central_meridian\\\", 0], PARAMETER[\\\"scale_factor\\\", 1], PARAMETER[\\\"false_easting\\\", 0], PARAMETER[\\\"false_northing\\\", 0], UNIT[\\\"metre\\\", 1, AUTHORITY[\\\"EPSG\\\", \\\"9001\\\"]], AXIS[\\\"X\\\", EAST], AXIS[\\\"Y\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"3857\\\"]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, epsg3857mod);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToWebMercator()\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> webMercator = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS_1984_Web_Mercator_Auxiliary_Sphere\\\",GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137,298.257223562997]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]], PROJECTION[\\\"Mercator_Auxiliary_Sphere\\\"],PARAMETER[\\\"False_Easting\\\",0],PARAMETER[\\\"False_Northing\\\",0],PARAMETER[\\\"Central_Meridian\\\",0],PARAMETER[\\\"Standard_Parallel_1\\\",0],PARAMETER[\\\"Scale_Factor\\\",1],PARAMETER[\\\"Auxiliary_Sphere_Type\\\",0.0],UNIT[\\\"Meter\\\",1]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, webMercator);\r\n        }\r\n    }\r\n\r\n</pre>\n</div>\n<p>The output of the program is:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>Original Coordinates <span style=\"color: blue;\">in</span> <span style=\"color: #a31515;\">'EPSG:4326'</span> convert to <span style=\"color: #a31515;\">'EPSG:3857'</span>:\r\nX: 23,578920, Y: 37,947121\r\n\r\n      <span style=\"color: #ff0000;\">with ProjNet To EPSG:3785 &gt;&gt; X: 2624793,408418, Y: 4545668,936282\r\n      with ProjNet To EPSG:3857 &gt;&gt; X: 2624793,408418, Y: 4545679,990060\r\n</span>    <span style=\"color: #008000;\">with DotSpatial.Projections &gt;&gt; X: 2624793,408418, Y: 4571958,427384\r\n</span>          <span style=\"color: #0000ff;\">manual Convertion     &gt;&gt; X: 2624793,408053, Y: 4571958,426748\r\n</span>\r\n</pre>\n</div>\n<p>Clearly there is a problem with ProjNet and Y coordinate conversion:</p>\n<ul>\n<li>Manual conversion, and DotSpatial Projection are very close in Y coordinate </li>\n<li>ProjNet, neither with the WKT projection refered in \"<a href=\"http://projnet.codeplex.com/wikipage?title=CommonWellKnownText&amp;referringTitle=Home\" target=\"_blank\">Popular Well-Known Text representations of Spatial Reference Systems</a>\" (EPSG:3785), nor the WKT projection found in blog page \"<a href=\"http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/\" target=\"_blank\">The Google Maps / Bing Maps Spherical Mercator Projection</a>\" (EPSG:3857), reffered in ProjNet <a href=\"http://projnet.codeplex.com/\" target=\"_blank\">home page</a> and <a href=\"http://projnet.codeplex.com/discussions/348696\" target=\"_blank\">discussions</a>, offer a correct solution. </li>\n<li>I have tried to create a WKT file using the <em>KnownCoordinateSystems.Projected.World.WebMercator.ToEsriString()</em> function from <em>DotSpatial.Projections</em>, but ProjNet gives me the error \"<em>Projection Mercator_Auxiliary_Sphere is not supported.</em>\". </li>\n</ul>\n<p>I&nbsp;believe neither of the above WKT are correct. I think converting EPSG:4326 to EPSG:3857 would be a routine job -&nbsp;everybody is projecting layers over Google/Bing/OpenStreeMap.</p>\n<p>Can anybody help, pointing me the correct WKT, in order ProjNet converts coordinates correctly?</p>\n<p>&nbsp;</p>\n<p>Thanks,<br />George J.</p>",
    "PostedDate": "2012-04-19T04:19:18.593-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "826185",
    "ThreadId": "352813",
    "Html": "<p>I think my quest came to an end; here is the final test code:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>    <span style=\"color: blue;\">class</span> Program\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: blue;\">double</span>[] originalCoords = { 23.57892F, 37.94712F };\r\n\r\n            <span style=\"color: green;\">// ProjNet To EPSG:3785</span>\r\n            <span style=\"color: green;\">// Found in: http://projnet.codeplex.com/wikipage?title=CommonWellKnownText&amp;referringTitle=Home</span>\r\n            ICoordinateTransformation ct = TransformToEPSG3785();\r\n            <span style=\"color: blue;\">double</span>[] resultProjNet3785 = ct.MathTransform.Transform(originalCoords);\r\n\r\n            <span style=\"color: green;\">// ProjNet To EPSG:3857</span>\r\n            <span style=\"color: green;\">// Found in: http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/</span>\r\n            ct = TransformToEPSG3857();\r\n            <span style=\"color: blue;\">double</span>[] resultProjNet3857 = ct.MathTransform.Transform(originalCoords);\r\n\r\n            <span style=\"color: green;\">// DotSpatial.Projections to Web Mercator</span>\r\n            <span style=\"color: blue;\">double</span>[] resultDotSpatial = { originalCoords[0], originalCoords[1] };\r\n            <span style=\"color: blue;\">double</span>[] z = { 0 };\r\n            Reproject.ReprojectPoints(resultDotSpatial, z, KnownCoordinateSystems.Geographic.World.WGS1984, KnownCoordinateSystems.Projected.World.WebMercator, 0, 1);\r\n\r\n            <span style=\"color: green;\">// Manual Convertion</span>\r\n            <span style=\"color: green;\">// Found in: http://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/</span>\r\n            <span style=\"color: blue;\">double</span>[] resultManual = { 0F, 0F };\r\n            resultManual[0] = originalCoords[0] * 20037508.34 / 180;\r\n            resultManual[1] = Math.Log(Math.Tan((90 + originalCoords[1]) * Math.PI / 360)) / (Math.PI / 180);\r\n            resultManual[1] = resultManual[1] * 20037508.34 / 180;\r\n\r\n            <span style=\"color: green;\">// ProjNet To Web Mercator</span>\r\n            <span style=\"color: green;\">// Getting from KnownCoordinateSystems.Projected.World.WebMercator.ToEsriString()</span>\r\n            <span style=\"color: green;\">// Getting error: {\"Projection Mercator_Auxiliary_Sphere is not supported.\"}</span>\r\n            <span style=\"color: green;\">// Modification: Changed PROJECTION to Mercator, added PARAMETER[\\\"latitude_of_origin\\\", 0]</span>\r\n            ct = TransformToDotSpatialWebMercator();\r\n            <span style=\"color: blue;\">double</span>[] resultProjNetWebMercator = ct.MathTransform.Transform(originalCoords);\r\n\r\n            <span style=\"color: green;\">// ProjNet To Google Mercator</span>\r\n            <span style=\"color: green;\">// Found in SharpMap examples WMS server example</span>\r\n            ct = TransformToGoogleMercator();\r\n            <span style=\"color: blue;\">double</span>[] resultProjNetGoogleMercator = ct.MathTransform.Transform(originalCoords);\r\n\r\n            <span style=\"color: green;\">// ProjNet To Mercator</span>\r\n            <span style=\"color: green;\">// Getting from Goolge Mercator example =&gt; targetCs.WKT</span>\r\n            <span style=\"color: green;\">// Getting error: {\"Projection Google Mercator is not supported.\"}</span>\r\n            <span style=\"color: green;\">// Modification: Changed PROJECTION to Mercator_1SP</span>\r\n            ct = TransformToMercator(<span style=\"color: blue;\">false</span>);\r\n            <span style=\"color: blue;\">double</span>[] resultProjNetMercator = ct.MathTransform.Transform(originalCoords);\r\n\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"Original Coordinates in 'EPSG:4326' convert to 'EPSG:3857':\"</span>);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"X: {0:.000000}, Y: {1:.000000}\"</span>, originalCoords[0], originalCoords[1]);\r\n            Console.WriteLine();\r\n\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"      with ProjNet To EPSG:3785 &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNet3785[0], resultProjNet3785[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"      with ProjNet To EPSG:3857 &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNet3857[0], resultProjNet3857[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"    with DotSpatial.Projections &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultDotSpatial[0], resultDotSpatial[1]);\r\n\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"   with ProjNet To Web Mercator &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNetWebMercator[0], resultProjNetWebMercator[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"  with ProjNet programmatically &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNetGoogleMercator[0], resultProjNetGoogleMercator[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"       with ProjNet To Mercator &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultProjNetMercator[0], resultProjNetMercator[1]);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"              manual Convertion &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, resultManual[0], resultManual[1]);\r\n\r\n            ct = TransformToMercator(<span style=\"color: blue;\">true</span>);\r\n            originalCoords = ct.MathTransform.Transform(resultProjNetMercator);\r\n            Console.WriteLine(<span style=\"color: #a31515;\">\"         reverse transformation &gt;&gt; X: {0:.000000}, Y: {1:.000000}\"</span>, originalCoords[0], originalCoords[1]);\r\n\r\n            Console.Read();\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToEPSG3785()\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> epsg3785 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"Popular Visualisation CRS / Mercator\\\", GEOGCS[\\\"Popular Visualisation CRS\\\", DATUM[\\\"Popular Visualisation Datum\\\", SPHEROID[\\\"Popular Visualisation Sphere\\\", 6378137, 0, AUTHORITY[\\\"EPSG\\\", \\\"7059\\\"]], TOWGS84[0, 0, 0, 0, 0, 0, 0], AUTHORITY[\\\"EPSG\\\", \\\"6055\\\"]], PRIMEM[\\\"Greenwich\\\", 0, AUTHORITY[\\\"EPSG\\\", \\\"8901\\\"]], UNIT[\\\"degree\\\", 0.0174532925199433, AUTHORITY[\\\"EPSG\\\", \\\"9102\\\"]], AXIS[\\\"E\\\", EAST], AXIS[\\\"N\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"4055\\\"]], PROJECTION[\\\"Mercator\\\"], PARAMETER[\\\"False_Easting\\\", 0], PARAMETER[\\\"False_Northing\\\", 0], PARAMETER[\\\"Central_Meridian\\\", 0], PARAMETER[\\\"Latitude_of_origin\\\", 0], UNIT[\\\"metre\\\", 1, AUTHORITY[\\\"EPSG\\\", \\\"9001\\\"]], AXIS[\\\"East\\\", EAST], AXIS[\\\"North\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"3785\\\"]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, epsg3785);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToEPSG3857()\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> epsg3857 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS 84 / Pseudo-Mercator\\\", GEOGCS[\\\"WGS 84\\\", DATUM[\\\"WGS_1984\\\", SPHEROID[\\\"WGS 84\\\", 6378137, 298.257223563, AUTHORITY[\\\"EPSG\\\", \\\"7030\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"6326\\\"]], PRIMEM[\\\"Greenwich\\\", 0, AUTHORITY[\\\"EPSG\\\", \\\"8901\\\"]], UNIT[\\\"degree\\\", 0.01745329251994328, AUTHORITY[\\\"EPSG\\\", \\\"9122\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"4326\\\"]], PROJECTION[\\\"Mercator_1SP\\\"], PARAMETER[\\\"central_meridian\\\", 0], PARAMETER[\\\"scale_factor\\\", 1], PARAMETER[\\\"false_easting\\\", 0], PARAMETER[\\\"false_northing\\\", 0], UNIT[\\\"metre\\\", 1, AUTHORITY[\\\"EPSG\\\", \\\"9001\\\"]], AXIS[\\\"X\\\", EAST], AXIS[\\\"Y\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"3857\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> epsg3857mod = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS 84 / Pseudo-Mercator\\\", GEOGCS[\\\"WGS 84\\\", DATUM[\\\"WGS_1984\\\", SPHEROID[\\\"WGS 84\\\", 6378137, 298.257223563, AUTHORITY[\\\"EPSG\\\", \\\"7030\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"6326\\\"]], PRIMEM[\\\"Greenwich\\\", 0, AUTHORITY[\\\"EPSG\\\", \\\"8901\\\"]], UNIT[\\\"degree\\\", 0.01745329251994328, AUTHORITY[\\\"EPSG\\\", \\\"9122\\\"]], AUTHORITY[\\\"EPSG\\\", \\\"4326\\\"]], PROJECTION[\\\"Mercator_1SP\\\"], PARAMETER[\\\"latitude_of_origin\\\", 0], PARAMETER[\\\"central_meridian\\\", 0], PARAMETER[\\\"scale_factor\\\", 1], PARAMETER[\\\"false_easting\\\", 0], PARAMETER[\\\"false_northing\\\", 0], UNIT[\\\"metre\\\", 1, AUTHORITY[\\\"EPSG\\\", \\\"9001\\\"]], AXIS[\\\"X\\\", EAST], AXIS[\\\"Y\\\", NORTH], AUTHORITY[\\\"EPSG\\\", \\\"3857\\\"]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, epsg3857mod);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToDotSpatialWebMercator()\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> webMercator = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS_1984_Web_Mercator_Auxiliary_Sphere\\\",GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137,298.257223562997]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]], PROJECTION[\\\"Mercator_Auxiliary_Sphere\\\"],PARAMETER[\\\"False_Easting\\\",0],PARAMETER[\\\"False_Northing\\\",0],PARAMETER[\\\"Central_Meridian\\\",0],PARAMETER[\\\"Standard_Parallel_1\\\",0],PARAMETER[\\\"Scale_Factor\\\",1],PARAMETER[\\\"Auxiliary_Sphere_Type\\\",0.0],UNIT[\\\"Meter\\\",1]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> webMercatorMod = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"WGS_1984_Web_Mercator_Auxiliary_Sphere\\\",GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137,298.257223562997]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]], PROJECTION[\\\"Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\", 0],PARAMETER[\\\"False_Easting\\\",0],PARAMETER[\\\"False_Northing\\\",0],PARAMETER[\\\"Central_Meridian\\\",0],PARAMETER[\\\"Standard_Parallel_1\\\",0],PARAMETER[\\\"Scale_Factor\\\",1],PARAMETER[\\\"Auxiliary_Sphere_Type\\\",0.0],UNIT[\\\"Meter\\\",1]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, webMercatorMod);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToGoogleMercator()\r\n        {\r\n            CoordinateSystemFactory csFac = <span style=\"color: blue;\">new</span> CoordinateSystemFactory();\r\n            CoordinateTransformationFactory ctFac = <span style=\"color: blue;\">new</span> CoordinateTransformationFactory();\r\n            IGeographicCoordinateSystem sourceCs = csFac.CreateGeographicCoordinateSystem(\r\n                <span style=\"color: #a31515;\">\"WGS 84\"</span>, ProjNet.CoordinateSystems.AngularUnit.Degrees,\r\n                HorizontalDatum.WGS84,\r\n                PrimeMeridian.Greenwich,\r\n                <span style=\"color: blue;\">new</span> AxisInfo(<span style=\"color: #a31515;\">\"north\"</span>, AxisOrientationEnum.North),\r\n                <span style=\"color: blue;\">new</span> AxisInfo(<span style=\"color: #a31515;\">\"east\"</span>, AxisOrientationEnum.East)\r\n                );\r\n\r\n            List&lt;ProjectionParameter&gt; parameters = <span style=\"color: blue;\">new</span> List&lt;ProjectionParameter&gt;();\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"semi_major\"</span>, 6378137.0));\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"semi_minor\"</span>, 6378137.0));\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"latitude_of_origin\"</span>, 0.0));\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"central_meridian\"</span>, 0.0));\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"scale_factor\"</span>, 1.0));\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"false_easting\"</span>, 0.0));\r\n            parameters.Add(<span style=\"color: blue;\">new</span> ProjectionParameter(<span style=\"color: #a31515;\">\"false_northing\"</span>, 0.0));\r\n            IProjection projection = csFac.CreateProjection(<span style=\"color: #a31515;\">\"Google Mercator\"</span>, <span style=\"color: #a31515;\">\"mercator_1sp\"</span>, parameters);\r\n            IProjectedCoordinateSystem targetCs = csFac.CreateProjectedCoordinateSystem(\r\n                <span style=\"color: #a31515;\">\"Google Mercator\"</span>,\r\n                sourceCs,\r\n                projection,\r\n                ProjNet.CoordinateSystems.LinearUnit.Metre,\r\n                <span style=\"color: blue;\">new</span> AxisInfo(<span style=\"color: #a31515;\">\"East\"</span>, AxisOrientationEnum.East),\r\n                <span style=\"color: blue;\">new</span> AxisInfo(<span style=\"color: #a31515;\">\"North\"</span>, AxisOrientationEnum.North)\r\n                );\r\n\r\n            <span style=\"color: blue;\">return</span> ctFac.CreateFromCoordinateSystems(sourceCs, targetCs);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICoordinateTransformation TransformToMercator(<span style=\"color: blue;\">bool</span> Invert)\r\n        {\r\n            <span style=\"color: blue;\">var</span> ctf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">var</span> cf = <span style=\"color: blue;\">new</span> ProjNet.CoordinateSystems.CoordinateSystemFactory();\r\n            <span style=\"color: blue;\">var</span> epsg4326 = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> mercator = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"Google Mercator\\\",GEOGCS[\\\"WGS 84\\\",DATUM[\\\"World Geodetic System 1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9102\\\"]],AXIS[\\\"north\\\",NORTH],AXIS[\\\"east\\\",EAST]],PROJECTION[\\\"Google Mercator\\\"],PARAMETER[\\\"semi_major\\\",6378137],PARAMETER[\\\"semi_minor\\\",6378137],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",0],PARAMETER[\\\"scale_factor\\\",1],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"East\\\",EAST],AXIS[\\\"North\\\",NORTH]]\"</span>);\r\n            <span style=\"color: blue;\">var</span> mercatorMod = cf.CreateFromWkt(<span style=\"color: #a31515;\">\"PROJCS[\\\"Google Mercator\\\",GEOGCS[\\\"WGS 84\\\",DATUM[\\\"World Geodetic System 1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9102\\\"]],AXIS[\\\"north\\\",NORTH],AXIS[\\\"east\\\",EAST]],PROJECTION[\\\"Mercator_1SP\\\"],PARAMETER[\\\"semi_major\\\",6378137],PARAMETER[\\\"semi_minor\\\",6378137],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",0],PARAMETER[\\\"scale_factor\\\",1],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"East\\\",EAST],AXIS[\\\"North\\\",NORTH]]\"</span>);\r\n\r\n            <span style=\"color: blue;\">if</span> (Invert)\r\n                <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(mercatorMod, epsg4326);\r\n            <span style=\"color: blue;\">else</span>\r\n                <span style=\"color: blue;\">return</span> ctf.CreateFromCoordinateSystems(epsg4326, mercatorMod);\r\n        }\r\n    }\r\n\r\n</pre>\n</div>\n<p>What's new in this version:</p>\n<ul>\n<li>It took some time to figure out why WKT produced from DotSpatial.Projections wasn&rsquo;t working; I had to change the Projection to \"Mercator\" and add PARAMETER[\\\"latitude_of_origin\\\", 0] in order ProjNet to parse the WKT. Despite the efforts the results wasn't as promising, as DotSpatial.Projection itself. </li>\n<li>Following D_Guidi's advice, I went through SharpMap's examples and I found out a projection, that it was generated programmatically, but it was transforming the coordinates correctly. </li>\n<li>I got the WKT code from the working projection (targetCs.WKT). I used this WKT with ProjNet in order to create a transformation. I got the error \"Projection Google Mercator is not supported.\". Checking the original C# code that WKT code come from, I saw that Mercator was actually Mercator_1SP. Changing \"Google Mercator\" with \"Mercator_1SP&rdquo;, I got the coordinates transform correctly. </li>\n</ul>\n<p>The results:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>Original Coordinates <span style=\"color: blue;\">in</span> <span style=\"color: #a31515;\">'EPSG:4326'</span> convert to <span style=\"color: #a31515;\">'EPSG:3857'</span>:\r\nX: 23,578920, Y: 37,947121\r\n\r\n      <span style=\"color: #ff0000;\">with ProjNet To EPSG:3785 &gt;&gt; X: 2624793,408418, Y: 4545668,936282\r\n      with ProjNet To EPSG:3857 &gt;&gt; X: 2624793,408418, Y: 4545679,990060\r\n</span>    <span style=\"color: #008000;\"><strong>with DotSpatial.Projections &gt;&gt; X: 2624793,408418, Y: 4571958,427384</strong></span>\r\n   with ProjNet To Web Mercator <span style=\"color: gray;\">&gt;&gt;</span> X: 2624793,408418, Y: 4545679,995424\r\n  <strong><span style=\"color: #008000;\">with ProjNet programmatically &gt;&gt; X: 2624793,408418, Y: 4571958,427384\r\n       with ProjNet To Mercator &gt;&gt; X: 2624793,408418, Y: 4571958,427384\r\n</span></strong>              <span style=\"color: #0000ff;\">manual Convertion &gt;&gt; X: 2624793,408053, Y: 4571958,426748</span>\r\n         reverse transformation <span style=\"color: gray;\">&gt;&gt;</span> X: 23,578920, Y: 37,947121\r\n</pre>\n</div>\n<p>So, the WKT that one can use in ProjNet to transform 'EPSG:4326' to 'EPSG:3857' and back&nbsp;is:</p>\n<pre>PROJCS[\"Google Mercator\",\r\n\tGEOGCS[\"WGS 84\",\r\n\t\tDATUM[\"World Geodetic System 1984\",\r\n\t\t\tSPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],\r\n\t\t\tAUTHORITY[\"EPSG\",\"6326\"]],\r\n\t\tPRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],\r\n\t\tUNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9102\"]],\r\n\t\tAXIS[\"north\",NORTH],\r\n\t\tAXIS[\"east\",EAST]],\r\n\tPROJECTION[\"Mercator_1SP\"],\r\n\tPARAMETER[\"semi_major\",6378137],\r\n\tPARAMETER[\"semi_minor\",6378137],\r\n\tPARAMETER[\"latitude_of_origin\",0],\r\n\tPARAMETER[\"central_meridian\",0],\r\n\tPARAMETER[\"scale_factor\",1],\r\n\tPARAMETER[\"false_easting\",0],\r\n\tPARAMETER[\"false_northing\",0],\r\n\tUNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],\r\n\tAXIS[\"East\",EAST],\r\n\tAXIS[\"North\",NORTH]\r\n]\r\n</pre>\n<p>I don't know if it matches the official WKT code for EPSG:3857, or if the WKT code above is correct, but it just works.</p>\n<p>&nbsp;</p>\n<p>Regards,<br />George J.</p>\n<p>&nbsp;</p>",
    "PostedDate": "2012-04-19T13:44:53.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1065750",
    "ThreadId": "352813",
    "Html": "This worked for me!!! Thank you for doing the research.<br />\n",
    "PostedDate": "2013-07-08T12:38:09.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]