[
  {
    "Id": "1251903",
    "ThreadId": "547261",
    "Html": "I'm writing a simple ship simulator with using of GMap. My ship is a marker and I'm giving him accelerate and changing a course by trackbars. I want to add a function of marker rotating. When I'm chaning a course, marker should also rotate. I've got some code form: <a href=\"http://stackoverflow.com/questions/6800613/rotating-image-marker-image-on-google-map-v3\" rel=\"nofollow\">here</a>\r<br />\nBut I'm doing someting wrong. It doesn't work properly. Here's my code:\r<br />\nNomoto.cs (engine):<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NoMoto\n{\n    class Nomoto\n    {\n        double inX;\n        double inX2;\n        double inY;\n        double inY2;\n        double r1 = 0;\n        double dt = 1;\n        double r2;\n        double K = 0.069591;\n        double T = 43.58193;\n        double angle = 0;\n\n        public void setStartingPositions(double __inX, double __inY)\n        {\n            inX = __inX;\n            inX2 = __inX;\n            inY = __inY;\n            inY2 = __inY;\n            r2 = 0;\n        }\n        public void moveShip(int __tbAccelerate, int __tbRotate)\n        {\n            calcAngle(inX2, inY2, inX, inY);\n            inX2 = inX;\n            inY2 = inX;\n            r2 += (K * __tbRotate * dt - r1 * dt) / T;\n            inX += Math.Cos(r2) * __tbAccelerate / 100000;\n            inY += Math.Sin(r2) * __tbAccelerate / 100000;\n        }\n        public double getX()\n        {\n            return inX;\n        }\n        public double getY()\n        {\n            return inY;\n        }\n        public double calcAngle(double fromX, double fromY, double toX, double toY)\n        {\n            double lat1 = fromX * Math.PI / 180;\n            double lon1 = fromY * Math.PI / 180;\n            double lat2 = toX * Math.PI / 180;\n            double lon2 = toY * Math.PI / 180;\n            angle = - Math.Atan2( Math.Sin( lon1 - lon2 ) * Math.Cos( lat2 ), Math.Cos( lat1 ) * Math.Sin( lat2 ) - Math.Sin( lat1 ) * Math.Cos( lat2 ) * Math.Cos( lon1 - lon2 ) );\n        if ( angle &lt; 0.0 )\n            angle  += Math.PI * 2.0;\n        if (angle == 0) {angle=1.5;}\n        return angle;\n        }\n        public double getAngle()\n        {\n            return (angle * 180/ Math.PI);\n        }\n    }\n}</code></pre>\n\nForm1.cs (main Program):<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Threading;\nusing GMap.NET.WindowsForms;\nusing GMap.NET;\nusing GMap.NET.MapProviders;\nusing GMap.NET.WindowsForms.Markers;\n\n//53,429206\n//14,567105\n\nnamespace NoMoto\n{\n    public partial class Form1 : Form\n    {\n        PointLatLng markerPosition;\n        GMapOverlay overlayOne;\n        Nomoto nomoto;\n        GMapMarkerCross shipMarker;\n        GMapMarkerGoogleGreen ship2;\n        Thread moveShip, updateShip;\n        double markerPositionLat = 0;\n        double markerPositionLng = 0;\n        bool isSimulationStarted = false;\n        public void UpdateMarker(GMapOverlay __overlayOne, PointLatLng __markerPosition)\n        {\n            gMapControl1.Position = __markerPosition;\n            shipMarker = new GMapMarkerCross(__markerPosition);\n            overlayOne.Markers.Remove(shipMarker);\n            overlayOne.Markers.Add(shipMarker);\n            gMapControl1.Overlays.Add(__overlayOne);\n        }\n        public void SimulationStartedControl(bool __isSimulationStarted)\n        {\n            if (isSimulationStarted)\n            {\n                groupBox1.Enabled = false;\n                groupBox3.Enabled = true;\n            }\n            else\n            {\n                groupBox1.Enabled = true;\n                groupBox3.Enabled = false;\n            }\n        }\n        public Form1()\n        {\n            //CheckForIllegalCrossThreadCalls = false;\n            InitializeComponent();\n            gMapControl1.Manager.Mode = AccessMode.ServerAndCache;\n            gMapControl1.MapProvider = GMapProviders.OpenSeaMapHybrid;\n            markerPosition = new PointLatLng(markerPositionLat, markerPositionLng);\n            overlayOne = new GMapOverlay(gMapControl1, &quot;OverlayOne&quot;);\n            shipMarker = new GMapMarkerCross(markerPosition);\n            nomoto = new Nomoto();\n            UpdateMarker(overlayOne, markerPosition);\n            SimulationStartedControl(isSimulationStarted);\n        }\n\n        private void btnGoto_Click(object sender, EventArgs e)\n        {\n            markerPosition = new PointLatLng(Double.Parse(textBoxLat.Text), Double.Parse(textBoxLng.Text));\n            UpdateMarker(overlayOne, markerPosition);\n        }\n\n        private void btnStartSim_Click(object sender, EventArgs e)\n        {\n            isSimulationStarted = true;\n            SimulationStartedControl(isSimulationStarted);\n            nomoto.setStartingPositions(shipMarker.Position.Lat, shipMarker.Position.Lng);\n            ship2 = new GMapMarkerGoogleGreen(new PointLatLng(shipMarker.Position.Lat, shipMarker.Position.Lng));\n            moveShip = new Thread(() =&gt;\n            {\n                while (true)\n                {\n                    Thread.Sleep(100);\n                    this.Invoke(new MethodInvoker(() =&gt;\n                    {\n                        nomoto.moveShip(tbAccelerate.Value, tbRotate.Value);\n                    }));\n                }\n            });\n            updateShip = new Thread(() =&gt;\n            {\n                while (true)\n                {\n                    Thread.Sleep(100);\n                    this.Invoke(new MethodInvoker(() =&gt;\n                    {\n                    ship2.Position = new PointLatLng(nomoto.getX(), nomoto.getY());\n                    gMapControl1.Position = new PointLatLng(nomoto.getX(), nomoto.getY());\n                    overlayOne.Markers.Remove(ship2);\n                    overlayOne.Markers.Add(ship2);\n                    ship2.Bearing = (float)nomoto.getAngle();\n                    gMapControl1.Overlays.Add(overlayOne);\n                    statusStripLatLng.Text = ship2.Position.Lat.ToString(&quot;0.00000000&quot;) + &quot;; &quot; + ship2.Position.Lng.ToString(&quot;0.00000000&quot;);\n                    }));\n                 }\n            });\n            moveShip.Start();\n            updateShip.Start();\n        }\n\n        private void btnStopSim_Click(object sender, EventArgs e)\n        {\n            isSimulationStarted = false;\n            SimulationStartedControl(isSimulationStarted);\n            moveShip.Abort();\n            updateShip.Abort();\n            overlayOne.Markers.Remove(ship2);\n            tbAccelerate.Value = 0;\n            tbRotate.Value = 0;\n        }\n\n        private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            isSimulationStarted = false;\n            SimulationStartedControl(isSimulationStarted);\n            moveShip.Abort();\n            updateShip.Abort();\n        }\n    }\n}</code></pre>\n\n",
    "PostedDate": "2014-06-02T04:06:31.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1342213",
    "ThreadId": "547261",
    "Html": "p.s. marker rotation demo [left menu, Live-&gt;FlightRadar] and <strong>GMarkerArrow.cs</strong><br />\n",
    "PostedDate": "2015-01-15T08:09:00.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]