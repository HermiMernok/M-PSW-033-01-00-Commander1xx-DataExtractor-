[
  {
    "Id": "265169",
    "ThreadId": "77552",
    "Html": "<div style=\"color:#000000;background-color:#ffffff\">\r\n<pre><div style=\"color:#000000;background-color:#ffffff\"><pre><pre>I added a new type of maps in the project&nbsp;- YandexMap (http://maps.yandex.ru)<br>Make the description and the formation of URL<br>Tiles have a standard size 256x256</pre>\r\n<span style=\"color:#008000\"><span style=\"color:#008000\"><br><span style=\"color:#008000\"><span style=\"color:#000000\">Everything works, maps are displayed. <br>There is only one problem, not suitable projection MercatorProjection, on a large scale there are differences in latitude.</span><br></span><span style=\"color:#000000\">YandexMap using&nbsp;Mercator projection, but with some changes.</span><br><span style=\"color:#000000\">Maybe someone knows what the problem? <br></span><br></span></span>\r\n<pre>Coordinate System - http://api.yandex.ru/maps/jsapi/doc/dg/concepts/coordinates_systems.xml</pre>\r\n<span style=\"color:#008000\"><span style=\"color:#008000\"><br>&nbsp;// In MapType.cs<br>&nbsp;&nbsp;&nbsp;<span style=\"color:#000000\">YandexMap=1000</span> <br><span style=\"color:#008000\">//----------------------------------------------------- <br></span> <br><span style=\"color:#008000\">// In GMaps.cs <br></span><span style=\"color:#0000ff\">internal</span> <span style=\"color:#0000ff\">string</span> <span style=\"color:#000000\">MakeImageUrl(</span>MapType type, Point pos, <span style=\"color:#0000ff\">int</span> zoom, <span style=\"color:#0000ff\">string</span> language)   <br>{&nbsp; <span style=\"color:#0000ff\">case</span> MapType.YandexMap: &nbsp; <br>&nbsp;&nbsp;&nbsp;{  &nbsp; &nbsp;<br><span style=\"color:#0000ff\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string</span> <span style=\"color:#000000\">server</span> = <span style=\"color:#a31515\">&quot;vec&quot;</span>;<br>&nbsp;  &nbsp; &nbsp;<span style=\"color:#0000ff\">string</span> <span style=\"color:#000000\">VersionYandexMap</span> = <span style=\"color:#a31515\">&quot;2.10.2&quot;</span>;<br> &nbsp; &nbsp;<span style=\"color:#008000\">//http://vec01.maps.yandex.ru/tiles?l=map&amp;v=2.10.2&amp;x=1494&amp;y=650&amp;z=11<br> &nbsp;</span> &nbsp;<span style=\"color:#0000ff\">return</span> <span style=\"color:#0000ff\">string</span>.<span style=\"color:#000000\">Format(</span><span style=\"color:#a31515\">&quot;http://{0}0{1}.maps.yandex.ru/tiles?l=map&amp;v={2}&amp;x={3}&amp;y={4}&amp;z={5}&quot;</span><span style=\"color:#000000\">, server, GetServerNum(pos, 4)+1, VersionYandexMap, pos.X, pos.Y, zoom);</span> &nbsp; <br>}  <br>.....  <br><span style=\"color:#0000ff\">public</span> <span style=\"color:#000000\">PureImage GetImageFrom(</span> <br><span style=\"color:#0000ff\">....<br>case</span> MapType.YandexMap: <br>{ \t <br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#000000\">request.Referer = </span><span style=\"color:#a31515\">&quot;http://maps.yandex.ru/&quot;</span>; <br>} <br><span style=\"color:#0000ff\">break</span>; <br><br></span></span></pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-12-08T20:58:24.483-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "265170",
    "ThreadId": "77552",
    "Html": "<p>yandex.maps uses Mercator projection with Earth represented as ellipsoid (google maps&nbsp;represented as SPHEROID)</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-08T21:14:18.59-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "265878",
    "ThreadId": "77552",
    "Html": "<p>Hi. Do you found any solution for this problem? Is there code sample for Mercator projection for yandex maps?</p>",
    "PostedDate": "2009-12-10T12:29:30.04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428248",
    "ThreadId": "77552",
    "Html": "<p>In addition sevacom message</p>\r\n<p><span style=\"color:#008000\">// In Core.cs property MapType set...</span></p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">case</span> MapType.YandexMap:\r\n                  {\r\n                      <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">false</span> == (Projection <span style=\"color:Blue\">is</span> MercatorProjectionYandex))\r\n                      {\r\n                          Projection = <span style=\"color:Blue\">new</span> MercatorProjectionYandex();\r\n                      }\r\n                   }\r\n                  <span style=\"color:Blue\">break</span>;\r\n</pre>\r\n</div>",
    "PostedDate": "2010-04-07T04:36:51.997-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428253",
    "ThreadId": "77552",
    "Html": "<p>Hi, for yandex maps i write some additional code for coodinate convertion. Whithout it GMap cannot correctly work with yandex.</p>\r\n<p>If you intersted for my correction code for yandex maps, i can post it.</p>",
    "PostedDate": "2010-04-07T04:53:41.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428255",
    "ThreadId": "77552",
    "Html": "<p>Yes i create new Projection for Yandex maps, i hope it included in the next versions of GMap:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n\r\n<span style=\"color:Blue\">namespace</span> GMap.NET.Projections\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> YandexProjection : PureProjection\r\n    {\r\n        <span style=\"color:Green\">//const double MinLatitude = -85.05112878;</span>\r\n        <span style=\"color:Green\">//const double MaxLatitude = 85.05112878;</span>\r\n        <span style=\"color:Green\">//const double MinLongitude = -177;</span>\r\n        <span style=\"color:Green\">//const double MaxLongitude = 177;</span>\r\n\r\n        <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MinLatitude = -80.0;\r\n        <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MaxLatitude = 84.0;\r\n        <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MinLongitude = -180.0;\r\n        <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MaxLongitude = 180.0;\r\n        \r\n        \r\n        <span style=\"color:Green\">// http://vec.maps.yandex.net/tiles?l=map&amp;v=2.8.1&amp;x=%d&amp;y=%d&amp;z=%d &mdash; векторная карта (режим &quot;Схема&quot; на maps.yandex.ru),</span>\r\n        <span style=\"color:Green\">// http://sat.maps.yandex.net/tiles?l=sat&amp;v=1.11.0&amp;x=%d&amp;y=%d&amp;z=%d &mdash; спутниковые снимки.</span>\r\n\r\n        <span style=\"color:Green\">// function _geoToMercator(n)</span>\r\n        <span style=\"color:Green\">//{</span>\r\n        <span style=\"color:Green\">// var l = n.getLng() * Math.PI / 180,</span>\r\n        <span style=\"color:Green\">// u = O(n.getLat(), -90, 90) * Math.PI / 180,</span>\r\n        <span style=\"color:Green\">// t = 6378137,</span>\r\n        <span style=\"color:Green\">// s = 0.0818191908426, m = s * Math.sin(u);</span>\r\n        <span style=\"color:Green\">// var o = Math.tan(Math.PI / 4 + u / 2) || 1e-13, r = Math.pow(Math.tan(Math.PI / 4 + Math.asin(m) / 2), s),</span>\r\n        <span style=\"color:Green\">// q = o / r;</span>\r\n        <span style=\"color:Green\">// return new YMaps.Point(Math.round(t * l), Math.round(t * Math.log(q)));</span>\r\n        <span style=\"color:Green\">//}</span>\r\n        \r\n        <span style=\"color:Green\">// function _mercatorToTiles(e)</span>\r\n        <span style=\"color:Green\">// {</span>\r\n        <span style=\"color:Green\">//   return new YMaps.Point(Math.round((20037508.342789 + e.X) * 53.5865938),</span>\r\n        <span style=\"color:Green\">//      Math.round((20037508.342789 - e.y) * 53.5865938));</span>\r\n        <span style=\"color:Green\">// }</span>\r\n\r\n<span style=\"color:Green\">//        Смещение вызвано тем, что у гугла используется сфера, а у яндекса- эллипсоид.</span>\r\n<span style=\"color:Green\">//Поэтому расчеты немного посложнее:</span>\r\n\r\n<span style=\"color:Green\">//  Dim rLon  As Double, rLat As Double, a As Double, k As Double, z As Double </span>\r\n<span style=\"color:Green\">//      rLon = GeoCrd.Lon * pii / 180 </span>\r\n<span style=\"color:Green\">//      rLat = GeoCrd.Lat * pii / 180 </span>\r\n<span style=\"color:Green\">//      a = 6378137 </span>\r\n<span style=\"color:Green\">//      k = 0.0818191908426 </span>\r\n<span style=\"color:Green\">//      z = Tan(pii / 4 + rLat / 2)/(Tan(pii / 4 + ArcSin(k * Sin(rLat)) / 2)) ^ k </span>\r\n<span style=\"color:Green\">//      GetPix.X = CLng((20037508.342789 +a * rLon) * 53.5865938 / 2 ^ (23 - Mstb)) </span>\r\n<span style=\"color:Green\">//      GetPix.Y = CLng((20037508.342789 -a * Log(z)) * 53.5865938 / 2 ^ (23 - Mstb)) </span>\r\n\r\n<span style=\"color:Green\">//Mstb-это зум на гугле.</span>\r\n\r\n<span style=\"color:Green\">//Обратный пересчет:</span>\r\n\r\n\r\n<span style=\"color:Green\">//  Dim a As Double, c1 As Double, c2 As Double, c3 As Double, c4 As Double, g As Double, z As Double </span>\r\n<span style=\"color:Green\">//  Dim mercX As Double, mercY As Double </span>\r\n<span style=\"color:Green\">//      a= 6378137 </span>\r\n<span style=\"color:Green\">//      c1 = 0.00335655146887969: c2 = 0.00000657187271079536: c3 = 0.00000001764564338702: c4=0.00000000005328478445 </span>\r\n<span style=\"color:Green\">//      mercX = (AbsPxl.X * 2 ^ (23 - Mstb)) / 53.5865938 - 20037508.342789 </span>\r\n<span style=\"color:Green\">//      mercY = 20037508.342789 - (AbsPxl.Y * 2 ^ (23 - Mstb)) / 53.5865938 </span>\r\n\r\n<span style=\"color:Green\">//      g = pii/2 - 2 * Atn(1 / Exp(mercY /a)) </span>\r\n<span style=\"color:Green\">//      z = g + c1 * Sin(2 * g) + c2 * Sin(4 * g) + c3 * Sin(6 * g) + c4 * Sin(8 * g) </span>\r\n\r\n<span style=\"color:Green\">//      GetLatLng.Lat = z * 180 / pii </span>\r\n<span style=\"color:Green\">//      GetLatLng.Lon = mercX / a * 180 / pii </span>\r\n\r\n\r\n        <span style=\"color:Blue\">readonly</span> Size _tileSize = <span style=\"color:Blue\">new</span> Size(256, 256);\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size TileSize\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> _tileSize;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">double</span> Axis\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> 6378137;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">double</span> Flattening\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> (1.0 / 298.257223563);\r\n                <span style=\"color:Green\">// return 0.0818191908426;</span>\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Point FromLatLngToPixel(<span style=\"color:Blue\">double</span> lat, <span style=\"color:Blue\">double</span> lng, <span style=\"color:Blue\">int</span> zoom)\r\n        {\r\n            Point ret = Point.Empty;\r\n\r\n            <span style=\"color:Green\">//lat = Clip(lat, MinLatitude, MaxLatitude);</span>\r\n            <span style=\"color:Green\">//lng = Clip(lng, MinLongitude, MaxLongitude);</span>\r\n\r\n            <span style=\"color:Green\">//double x = (lng + 180) / 360;</span>\r\n            <span style=\"color:Green\">//double sinLatitude = Math.Sin(lat * Math.PI / 180);</span>\r\n            <span style=\"color:Green\">//double y = 0.5 - Math.Log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI);</span>\r\n\r\n            <span style=\"color:Green\">//Size s = GetTileMatrixSizePixel(zoom);</span>\r\n            <span style=\"color:Green\">//int mapSizeX = s.Width;</span>\r\n            <span style=\"color:Green\">//int mapSizeY = s.Height;</span>\r\n\r\n            <span style=\"color:Green\">//ret.X = (int)Clip(x * mapSizeX + 0.5, 0, mapSizeX - 1);</span>\r\n            <span style=\"color:Green\">//ret.Y = (int)Clip(y * mapSizeY + 0.5, 0, mapSizeY - 1);</span>\r\n\r\n            <span style=\"color:Blue\">var</span> merkator = YandexUtils.GeoToMercator(<span style=\"color:Blue\">new</span> DoublePoint(lng, lat));\r\n            <span style=\"color:Blue\">var</span> tile = YandexUtils.MercatorToTiles(merkator);\r\n            <span style=\"color:Blue\">var</span> pix = YandexUtils.TileCoordinatesToPixels(tile, zoom);\r\n\r\n            ret.X = (<span style=\"color:Blue\">int</span>)pix.X;\r\n            ret.Y = (<span style=\"color:Blue\">int</span>)pix.Y;\r\n\r\n            <span style=\"color:Blue\">return</span> ret;\r\n\r\n            <span style=\"color:Green\">//Point ret = Point.Empty;</span>\r\n\r\n            <span style=\"color:Green\">//double rLon, rLat, a, k, z;</span>\r\n\r\n            <span style=\"color:Green\">//rLon = lng * Math.PI / 180;</span>\r\n            <span style=\"color:Green\">//rLat = lat * Math.PI / 180;</span>\r\n            <span style=\"color:Green\">//a = 6378137;</span>\r\n            <span style=\"color:Green\">//k = 0.0818191908426;</span>\r\n            <span style=\"color:Green\">//z = Math.Tan(Math.PI / 4 + rLat / 2) / (Math.Tan(Math.PI / 4 + Math.Asin(k * Math.Sin(rLat)) / 2));</span>\r\n            <span style=\"color:Green\">//z = Math.Pow(z, k);</span>\r\n\r\n\r\n            <span style=\"color:Green\">//ret.X = (int)((20037508.342789 + a * rLon) * 53.5865938 / Math.Pow(2, (23 - zoom)));</span>\r\n            <span style=\"color:Green\">//ret.Y = (int)((20037508.342789 - a * Math.Log(z)) * 53.5865938 / Math.Pow(2, (23 - zoom)));</span>\r\n\r\n            <span style=\"color:Green\">//return ret;</span>\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> PointLatLng FromPixelToLatLng(<span style=\"color:Blue\">int</span> x, <span style=\"color:Blue\">int</span> y, <span style=\"color:Blue\">int</span> zoom)\r\n        {\r\n            PointLatLng ret = PointLatLng.Empty;\r\n\r\n            <span style=\"color:Green\">//Size s = GetTileMatrixSizePixel(zoom);</span>\r\n            <span style=\"color:Green\">//double mapSizeX = s.Width;</span>\r\n            <span style=\"color:Green\">//double mapSizeY = s.Height;</span>\r\n\r\n            <span style=\"color:Green\">//double xx = (Clip(x, 0, mapSizeX - 1) / mapSizeX) - 0.5;</span>\r\n            <span style=\"color:Green\">//double yy = 0.5 - (Clip(y, 0, mapSizeY - 1) / mapSizeY);</span>\r\n\r\n            <span style=\"color:Green\">//ret.Lat = 90 - 360 * Math.Atan(Math.Exp(-yy * 2 * Math.PI)) / Math.PI;</span>\r\n            <span style=\"color:Green\">//ret.Lng = 360 * xx;</span>\r\n\r\n            <span style=\"color:Green\">// return ret;</span>\r\n\r\n            <span style=\"color:Blue\">var</span> tile = YandexUtils.GetTileCoordFromPixCoord(<span style=\"color:Blue\">new</span> IntPoint(x, y), zoom);\r\n            <span style=\"color:Blue\">var</span> merkartor = YandexUtils.TileToMercator(tile);\r\n            <span style=\"color:Blue\">var</span> geo = YandexUtils.MercatorToGeo(merkartor);\r\n\r\n            ret.Lat = geo.Y;\r\n            ret.Lng = geo.X;\r\n\r\n            <span style=\"color:Blue\">return</span> ret;\r\n\r\n            <span style=\"color:Green\">//PointLatLng ret = PointLatLng.Empty;</span>\r\n\r\n            <span style=\"color:Green\">//double a, c1, c2, c3, c4, g, z;</span>\r\n            <span style=\"color:Green\">//double mercX, mercY;</span>\r\n\r\n            <span style=\"color:Green\">//a = 6378137;</span>\r\n            <span style=\"color:Green\">//c1 = 0.00335655146887969;</span>\r\n            <span style=\"color:Green\">//c2 = 0.00000657187271079536;</span>\r\n            <span style=\"color:Green\">//c3 = 0.00000001764564338702;</span>\r\n            <span style=\"color:Green\">//c4 = 0.00000000005328478445;</span>\r\n            <span style=\"color:Green\">//mercX = (Math.Abs(x) * Math.Pow(2, (23 - zoom))) / 53.5865938 - 20037508.342789;</span>\r\n            <span style=\"color:Green\">//mercY = 20037508.342789 - (Math.Abs(y) * Math.Pow(2, (23 - zoom))) / 53.5865938;</span>\r\n\r\n            <span style=\"color:Green\">//g = Math.PI / 2 - 2 * Math.Atan(1 / Math.Exp(mercY / a));</span>\r\n            <span style=\"color:Green\">//z = g + c1 * Math.Sin(2 * g) + c2 * Math.Sin(4 * g) + c3 * Math.Sin(6 * g) + c4 * Math.Sin(8 * g);</span>\r\n\r\n            <span style=\"color:Green\">//ret.Lat = z * 180 / Math.PI;</span>\r\n            <span style=\"color:Green\">//ret.Lng = mercX / a * 180 / Math.PI;</span>\r\n\r\n            <span style=\"color:Green\">//return ret;</span>\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size GetTileMatrixMinXY(<span style=\"color:Blue\">int</span> zoom)\r\n        {\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> Size(0, 0);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size GetTileMatrixMaxXY(<span style=\"color:Blue\">int</span> zoom)\r\n        {\r\n            <span style=\"color:Blue\">int</span> xy = (1 &lt;&lt; zoom);\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> Size(xy - 1, xy - 1);\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Clips a number to the specified minimum and maximum values.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;n&quot;&gt;</span><span style=\"color:Green\">The number to clip.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;minValue&quot;&gt;</span><span style=\"color:Green\">Minimum allowable value.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;maxValue&quot;&gt;</span><span style=\"color:Green\">Maximum allowable value.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Green\">The clipped value.&lt;/returns&gt;</span>\r\n        <span style=\"color:Blue\">double</span> Clip(<span style=\"color:Blue\">double</span> n, <span style=\"color:Blue\">double</span> minValue, <span style=\"color:Blue\">double</span> maxValue)\r\n        {\r\n            <span style=\"color:Blue\">return</span> Math.Min(Math.Max(n, minValue), maxValue);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> YandexUtils\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DoublePoint GeoToMercator(DoublePoint g)\r\n        {\r\n            <span style=\"color:Blue\">double</span> d = g.X * Math.PI / 180, m = g.Y * Math.PI / 180,\r\n                l = 6378137,\r\n                k = 0.0818191908426,\r\n                f = k * Math.Sin(m);\r\n            <span style=\"color:Blue\">double</span> h = Math.Tan(Math.PI / 4 + m / 2),\r\n                j = Math.Pow(Math.Tan(Math.PI / 4 + Math.Asin(f) / 2), k), i = h / j;\r\n            <span style=\"color:Green\">// return new DoublePoint(Math.round(l * d), Math.round(l * Math.log(i)));</span>\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> DoublePoint(l * d, l * Math.Log(i));\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DoublePoint MercatorToGeo(DoublePoint e)\r\n        {\r\n            <span style=\"color:Blue\">double</span> j = Math.PI, f = j / 2, i = 6378137, n = 0.003356551468879694, k = 0.00000657187271079536,\r\n                h = 1.764564338702e-8, m = 5.328478445e-11;\r\n            <span style=\"color:Blue\">double</span> g = f - 2 * Math.Atan(1 / Math.Exp(e.Y / i));\r\n            <span style=\"color:Blue\">double</span> l = g + n * Math.Sin(2 * g) + k * Math.Sin(4 * g) + h * Math.Sin(6 * g) + m * Math.Sin(8 * g);\r\n            <span style=\"color:Blue\">double</span> d = e.X / i;\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> DoublePoint(d * 180 / Math.PI, l * 180 / Math.PI);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DoublePoint MercatorToTiles(DoublePoint e)\r\n        {\r\n            <span style=\"color:Blue\">double</span> d = Math.Round((20037508.342789 + e.X) * 53.5865938);\r\n            <span style=\"color:Blue\">double</span> f = Math.Round((20037508.342789 - e.Y) * 53.5865938);\r\n            d = BoundaryRestrict(d, 0, 2147483647);\r\n            f = BoundaryRestrict(f, 0, 2147483647);\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> DoublePoint(d, f);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DoublePoint TileToMercator(IntPoint d)\r\n        {\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> DoublePoint(Math.Round(d.X / 53.5865938 - 20037508.342789),\r\n                Math.Round(20037508.342789 - d.Y / 53.5865938));\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DoublePoint TileCoordinatesToPixels(DoublePoint i, <span style=\"color:Blue\">int</span> h)\r\n        {\r\n            <span style=\"color:Blue\">double</span> g = Math.Pow(2, ToScale(h));\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> DoublePoint((<span style=\"color:Blue\">int</span>)i.X / g, (<span style=\"color:Blue\">int</span>)i.Y / g);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">double</span> BoundaryRestrict(<span style=\"color:Blue\">double</span> f, <span style=\"color:Blue\">double</span> e, <span style=\"color:Blue\">double</span> d)\r\n        {\r\n            <span style=\"color:Blue\">return</span> Math.Max(Math.Min(f, d), e);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">int</span> ToScale(<span style=\"color:Blue\">int</span> i)\r\n        {\r\n            <span style=\"color:Blue\">return</span> 23 - i;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IntPoint GetTile(DoublePoint h, <span style=\"color:Blue\">int</span> i)\r\n        {\r\n            <span style=\"color:Blue\">var</span> e = 8;\r\n            <span style=\"color:Blue\">var</span> j = ToScale(i);\r\n            <span style=\"color:Blue\">var</span> g = (<span style=\"color:Blue\">int</span>) h.X &gt;&gt; j;\r\n            <span style=\"color:Blue\">var</span> f = (<span style=\"color:Blue\">int</span>)h.Y &gt;&gt; j;\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> IntPoint(g &gt;&gt; e, f &gt;&gt; e);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IntPoint GetPxCoordFromTileCoord(DoublePoint h, <span style=\"color:Blue\">int</span> i)\r\n        {\r\n            <span style=\"color:Blue\">var</span> j = ToScale(i);\r\n            <span style=\"color:Blue\">var</span> g = (<span style=\"color:Blue\">int</span>)h.X &gt;&gt; j;\r\n            <span style=\"color:Blue\">var</span> f = (<span style=\"color:Blue\">int</span>)h.Y &gt;&gt; j;\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> IntPoint(g, f);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IntPoint GetTileCoordFromPixCoord(IntPoint h, <span style=\"color:Blue\">int</span> i)\r\n        {\r\n            <span style=\"color:Blue\">var</span> j = ToScale(i);\r\n            <span style=\"color:Blue\">var</span> g = h.X &lt;&lt; j;\r\n            <span style=\"color:Blue\">var</span> f = h.Y &lt;&lt; j;\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> IntPoint(g, f);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">struct</span> DoublePoint\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> X;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Y;\r\n\r\n        <span style=\"color:Blue\">public</span> DoublePoint(<span style=\"color:Blue\">double</span> x, <span style=\"color:Blue\">double</span> y)\r\n        {\r\n            X = x;\r\n            Y = y;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">struct</span> IntPoint\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> X;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> Y;\r\n\r\n        <span style=\"color:Blue\">public</span> IntPoint(<span style=\"color:Blue\">int</span> x, <span style=\"color:Blue\">int</span> y)\r\n        {\r\n            X = x;\r\n            Y = y;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-07T05:02:59.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428259",
    "ThreadId": "77552",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\"><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Green\">//in MercatorProjection.cs  </span>\r\n\r\n\r\n</pre>\r\n</div>\r\n</span></pre>\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> MercatorProjectionYandex : PureProjection\r\n   {\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MinLatitude = -85.05112878;\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MaxLatitude = 85.05112878;\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MinLongitude = -177;\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MaxLongitude = 177;\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span>  RAD_DEG = 180 / Math.PI;\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span>  DEG_RAD = Math.PI / 180;\r\n       <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> MathPiDiv4 = Math.PI / 4;\r\n       \r\n\r\n       Size tileSize = <span style=\"color:Blue\">new</span> Size(256, 256);\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size TileSize\r\n       {\r\n           <span style=\"color:Blue\">get</span>\r\n           {\r\n               <span style=\"color:Blue\">return</span> tileSize;\r\n           }\r\n       }\r\n\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">double</span> Axis\r\n       {\r\n           <span style=\"color:Blue\">get</span>\r\n           {\r\n               <span style=\"color:Blue\">return</span> 6356752.3142;\r\n           }\r\n       }\r\n\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">double</span> Flattening\r\n       {\r\n           <span style=\"color:Blue\">get</span>\r\n           {\r\n               <span style=\"color:Blue\">return</span> (1.0 / 298.257223563);\r\n           }\r\n       }\r\n\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Point FromLatLngToPixel(<span style=\"color:Blue\">double</span> lat, <span style=\"color:Blue\">double</span> lng, <span style=\"color:Blue\">int</span> zoom)\r\n       {\r\n           Point ret = Point.Empty;\r\n\r\n           lat = Clip(lat, MinLatitude, MaxLatitude);\r\n           lng = Clip(lng, MinLongitude, MaxLongitude);\r\n           \r\n           <span style=\"color:Blue\">double</span> rLon, rLat, a, k, z, z1;\r\n\r\n\r\n           rLon = lng * DEG_RAD;<span style=\"color:Green\">// Math.PI / 180; </span>\r\n           rLat = lat * DEG_RAD;<span style=\"color:Green\">// Math.PI / 180; </span>\r\n           \r\n           a = 6378137 ;      \r\n           k = 0.0818191908426;\r\n\r\n           z = Math.Tan(MathPiDiv4 + rLat / 2) / Math.Pow((Math.Tan(MathPiDiv4 + Math.Asin(k * Math.Sin(rLat)) / 2)), k);\r\n           z1 = Math.Pow(2,23 - zoom);      \r\n           <span style=\"color:Blue\">double</span> DX =  ((20037508.342789 + a * rLon) * 53.5865938 /  z1);      \r\n           <span style=\"color:Blue\">double</span> DY = ((20037508.342789 - a * Math.Log(z)) * 53.5865938 / z1);\r\n           ret.X = (<span style=\"color:Blue\">int</span>)DX;\r\n           ret.Y = (<span style=\"color:Blue\">int</span>)DY;\r\n           <span style=\"color:Blue\">return</span> ret;\r\n\r\n\r\n       }\r\n\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> PointLatLng FromPixelToLatLng(<span style=\"color:Blue\">int</span> x, <span style=\"color:Blue\">int</span> y, <span style=\"color:Blue\">int</span> zoom)\r\n       {\r\n           PointLatLng ret = PointLatLng.Empty;\r\n\r\n           Size s = GetTileMatrixSizePixel(zoom);\r\n           <span style=\"color:Blue\">double</span> mapSizeX = s.Width;\r\n           <span style=\"color:Blue\">double</span> mapSizeY = s.Height;\r\n\r\n           <span style=\"color:Blue\">double</span>  a, c1, c2 , c3 , c4, g, z;            \r\n           <span style=\"color:Blue\">double</span> mercX, mercY; \r\n           a= 6378137;\r\n           c1 = 0.00335655146887969;\r\n           c2 = 0.00000657187271079536;\r\n           c3 = 0.00000001764564338702;\r\n           c4=0.00000000005328478445;\r\n           <span style=\"color:Blue\">double</span> z1=(23 - zoom );\r\n           mercX = ( x * Math.Pow ( 2,z1)) / 53.5865938 - 20037508.342789; \r\n           mercY = 20037508.342789 - (y *Math.Pow ( 2 ,z1)) / 53.5865938; \r\n           g =Math.PI /2 - 2 *Math.Atan (1 / Math.Exp (mercY /a)) ;\r\n           z = g + c1 * Math.Sin(2 * g) + c2 * Math.Sin(4 * g) + c3 * Math.Sin(6 * g) + c4 * Math.Sin(8 * g);\r\n\r\n\r\n           ret.Lat = z * RAD_DEG;\r\n\r\n           ret.Lng = mercX / a * RAD_DEG; \r\n\r\n      \r\n           <span style=\"color:Blue\">return</span> ret;\r\n       }\r\n\r\n       <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n       <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Clips a number to the specified minimum and maximum values.</span>\r\n       <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n       <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;n&quot;&gt;</span><span style=\"color:Green\">The number to clip.&lt;/param&gt;</span>\r\n       <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;minValue&quot;&gt;</span><span style=\"color:Green\">Minimum allowable value.&lt;/param&gt;</span>\r\n       <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;maxValue&quot;&gt;</span><span style=\"color:Green\">Maximum allowable value.&lt;/param&gt;</span>\r\n       <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Green\">The clipped value.&lt;/returns&gt;</span>\r\n       <span style=\"color:Blue\">double</span> Clip(<span style=\"color:Blue\">double</span> n, <span style=\"color:Blue\">double</span> minValue, <span style=\"color:Blue\">double</span> maxValue)\r\n       {\r\n           <span style=\"color:Blue\">return</span> Math.Min(Math.Max(n, minValue), maxValue);\r\n       }\r\n\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size GetTileMatrixMinXY(<span style=\"color:Blue\">int</span> zoom)\r\n       {\r\n           <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> Size(0, 0);\r\n       }\r\n\r\n       <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size GetTileMatrixMaxXY(<span style=\"color:Blue\">int</span> zoom)\r\n       {\r\n           <span style=\"color:Blue\">int</span> xy = (1 &lt;&lt; zoom);\r\n           <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> Size(xy - 1, xy - 1);\r\n       }\r\n   }\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2010-04-07T05:14:02.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428263",
    "ThreadId": "77552",
    "Html": "<p>пока я копировал, ты уже вставил свой вариант :) У тебя круче, но подход похоже одинаковый. Спасибо.</p>",
    "PostedDate": "2010-04-07T05:19:51.757-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428264",
    "ThreadId": "77552",
    "Html": "<p>Dear radioman!</p>\r\n<p>Thank you for your work!</p>\r\n<p>We hope to see support for YandexMap in the following versions of your beautiful component. (translated into English bing) ;)</p>",
    "PostedDate": "2010-04-07T05:26:07.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428291",
    "ThreadId": "77552",
    "Html": "<p>Perfect, thank you guys! ;}</p>",
    "PostedDate": "2010-04-07T06:37:15.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "462685",
    "ThreadId": "77552",
    "Html": "new MapType support: YandexMapRuSatellite, YandexMapRuLabels, YandexMapRuHybrid<br />\n<br />\n...<br />\n<br />\np.s. for leaflet users, use already defined CRS L.CRS.EPSG3395 // <a href=\"http://leafletjs.com/reference.html#icrs\" rel=\"nofollow\">http://leafletjs.com/reference.html#icrs</a><br />\n",
    "PostedDate": "2010-07-02T08:22:45.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]